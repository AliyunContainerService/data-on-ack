export default {
  route: {
    dashboard: 'Dashboard',
    quota: 'Resource Quota',
    quotaList: 'Quota Group List',
    user: 'User',
    userList: 'Users',
    userGroup: 'UserGroups',
    dataset: 'Dataset',
    datasetList: 'Dataset List',
    job: 'Elastic Job',
    jobList: 'Job List',
    jobCost: 'Job Cost'
  },
  navbar: {
    dashboard: 'Dashboard',
    exit: 'Exit'
  },
  quota: {
    retry: 'Please retry',
    success: 'Success',
    error: 'Error',
    validator: {
      name: 'Name cannot be empty',
      minMaxRelationError: 'Min > max error',
      formatError: 'Format error',
      nameRepeat: 'Name duplicated',
      resourceTypeEmpty: 'Resource type empty',
      resourceTypeNotUnique: 'Resource type not unique',
      mustBeNumber: 'Must be number',
      podShouldBeEmpty: 'pod should be empty in editing namespace'
    },
    ok: {
      changeResourceType: 'Change Resource Type OK',
      deleteSuccess: 'Delete Success',
      addSuccess: 'Add Success',
      updateSuccess: 'Update Success'
    },
    exception: {
      treeEmptyError: 'Elastic quota tree empty, add node first',
      getElasticQuotaTree: 'Get Elastic Quota Tree Failed',
      changeResourceType: 'Change Resource Type Failed',
      deleteNode: 'Delete Quota Node Error',
      addQuota: 'Add Quota Node Error',
      updateQuota: 'Update Quota Node Error',
      getNamespace: 'Get Namespace Error'
    },
    placeholder: {
      namespace: 'Select namespace'
    },
    name: 'Name',
    quotaName: 'Quota Name',
    namespace: 'Namespaces',
    search: 'Search',
    add: 'Add',
    edit: 'Edit',
    delete: 'Delete',
    cancel: 'Cancel',
    save: 'Save',
    changeResourceType: 'Change resource type',
    min: 'Min',
    max: 'Max',
    editQuota: 'Edit Quota Node',
    addQuota: 'Add Quota Node',
    gpuCard: 'Card',
    resourceType: 'Resource Type',
    comment: 'Comments',
    operator: 'Operation'
  },
  user: {
    quota: 'Quota',
    namespace: 'Quota Namespace',
    search: 'Search',
    add: 'Add',
    tokenCopyedSuccess: 'token copyed success',
    tokenCopyedFailed: 'token copyed failed',
    userName: 'User Name',
    userType: 'User Type',
    roles: 'Roles',
    clusterRoles: 'Cluster Roles',
    kubeConfig: 'KubeConfig',
    bearerToken: 'Token',
    createTime: 'Create Time',
    operator: 'Operator',
    edit: 'Edit',
    delete: 'Delete',
    download: 'Download',
    copyToken: 'Copy Bearer Token',
    userNameNotice: 'Please choose user name',
    userTypeNotice: 'Please choose user type',
    clusterRoleNotice: 'Please choose cluster role',
    addUser: 'Add User',
    editUser: 'Edit User',
    save: 'Save',
    cancel: 'Cancel',
    userNameEmptyNotice: 'User name cannot be empty',
    userTypeEmptyNotice: 'User type cannot be empty',
    namespaceEmptyNotice: 'Namespace cannot be empty',
    roleEmptyNotice: 'Role cannot be empty',
    retry: 'Please retry',
    success: 'Success',
    error: 'Error',
    refresh: 'Please refresh',
    deleteSuccess: 'Delete success',
    deleteFailed: 'Delete failed',
    createSuccess: 'Create success',
    createFailed: 'Create failed',
    updateSuccess: 'Update success',
    updateFailed: 'Update failed',
    getUserFailed: 'Get user list failed',
    getQuotaTreeFailed: 'Get quota tree failed',
    groupName: 'User Group'
  },
  userGroup: {
    edit: 'Edit User Group',
    add: 'Add User Group',
    name: 'Name',
    namePlaceholder: 'Pleace input user group name',
    nameEmptyNotice: 'User group name cannot be empty',
    quotaEmptyNotice: 'User group quota cannot be empty',
    userNames: 'Please select users',
    quotaNames: 'Please select quotas',
    quotaNode: 'Quota',
    refresh: 'Refresh',
    user: 'Users'
  },
  dataset: {
    search: 'Search',
    add: 'Add',
    name: 'Name',
    namespace: 'Namespace',
    dataSource: 'Data Source',
    isAccelerate: 'Is Accelerate',
    status: 'Status',
    createTime: 'Create Time',
    operator: 'Operator',
    accelerate: 'Accelerate',
    removeAccelerate: 'Remove Accelerate',
    createDataset: 'Create Dataset',
    editDataset: 'Edit Dataset',
    nameNotice: 'Dataset Name',
    namespaceNotice: 'Please choose namespace',
    dataSourceType: 'Source Type',
    others: 'Others',
    subDirectory: 'Sub Dir',
    subDirectoryNotice: 'Mount data source to sub directory',
    nodeAffinity: 'NodeAffinity',
    tolerations: 'Taint Toleration',
    labelName: 'Label Name',
    tolerationEffect: 'Effect',
    tolerationSeconds: 'Seconds',
    op: 'operator',
    labelValue: 'Label Value',
    labelValueNotice: 'Split with ;',
    runtimeConfig: 'Runtime Config',
    datasetConfig: 'Dataset Config',
    cancel: 'Cancel',
    save: 'Save',
    accessConfig: 'Access Conf',
    usingJindo: 'Using Jindo',
    encrypt: 'Encrypt',
    isInYaml: 'Edit By Yaml',
    runtimeType: 'Type',
    dataSourceEmptyNotice: 'Datasource cannot be empty',
    subDirectoryEmptyNotice: 'Subdirectory cannot be empty',
    secretNotice: 'Please choose secret',
    secretKeyNotice: 'Please choose secret key',
    labelNameEmptyNotice: 'Label name cannot be empty',
    labelOpEmptyNotice: 'Label operator cannot be empty',
    labelValueEmptyNotice: 'Label value cannot be empty',
    effectEmptyNotice: 'Toleration effect cannot be empty',
    tolerationSecondsNotice: 'Toleration seconds must be number',
    tolerationSecondsEmptyNotice: 'Toleration seconds cannot be empty',
    nameEmptyNotice: 'Dataset name cannot be empty',
    namespaceEmptyNotice: 'Namespace cannot be empty',
    retry: 'Please retry',
    getNamespaceFailed: 'Get namespace failed',
    getDataFailed: 'Get data failed',
    success: 'Success',
    accelerateFailed: 'Accelerate failed',
    removeAccelerateSuccess: 'Remove accelerate success',
    removeAccelerateFailed: 'Remove accelerate failed',
    executeSuccess: 'Execute success',
    warning: 'Warning',
    runtimeConfigEmpty: 'Runtime config is empty',
    datasetConfigEmpty: 'Dataset config is empty'
  },
  job: {
    training: 'Training Job',
    inference: 'Inference Job',
    search: 'Search',
    refresh: 'Refresh',
    namespace: 'Namespace',
    name: 'Name',
    type: 'Type',
    status: 'Status',
    duration: 'Duration',
    cpuHour: 'CPU Core Hour',
    gpuHour: 'GPU Device Hour',
    requestGpus: 'Request GPU',
    allocatedGpus: 'Allocated GPU',
    replicas: 'Replicas',
    createTime: 'Create Time',
    operator: 'Operator',
    detail: 'Detail',
    cpu: 'CPU',
    gpu: 'GPU',
    resourceType: 'Resource Type',
    instanceType: 'Instance Type',
    tradePrice: 'Trade Price',
    onDemandPrice: 'OnDemand Price',
    tradeCost: 'Estimate Trade Cost',
    onDemandCost: 'Estimate OnDemand Cost',
    savedCost: 'Estimate Saved Cost'
  }
}
